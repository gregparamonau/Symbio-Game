Things that changes since the initial commit:

Changed Camera System completely:

    Before, the camera used to draw everything (every pixel), using the size of the pixels on the person's screen,
    which was inefficient and cost a lot of resources, running at close to ~ 15 milliseconds per frame, which was the maximum allowed
    to maintain the 60 FPS gameplay. In addition this cause problems when attempting to accomodate for different screen size and dimensions
    as it is difficult to scale such a large image in a moderate amount of time.

    This was changed so now the Camera uses a present resolution (320 x 180) for the screen size (or different depending on the
    dimensions of the player's screen. All the sprites and backgrounds are then draw onto this screen, and then proceed to be scaled up
    to match the monitor's resolution, which is much more efficient, costing closer to ~8 milliseconds per frame, allowing ample room 
    for the 60 FPS we envisioned

    This type of scaling only works for pixel art (the games art style), as with this style, each pixel of the art is represented by
    a 5x5 square of native pixels, which allows the whole thing to be drawn in a smaller resolution overall.

Implemented 2 new collision shapes:

    SLOPE / LINE SEGMENT:
    slope / line segment, which allows the player to walk on slanted edges up and down. The collision detector works by taking the line
    segment, and checking whether it intersects either of the two diagonals of the player's rectangle, which allows it to detect collisions.

    sprites for the slope are generated by creating an image the size of the lines bounding box, and checking every pixel in said image
    on its distance to the slope / line. This distance number is then used to determine the correct shade / color to fill the pixel with,
    creating a completely random and different sprite every time the game is loaded.

    CIRCLE:
    circle collision is detected by clamping the circles position coordinates inside the player's rectangle, and checking whether the 
    distance between the circle's center and the clamped position is less than its radius, it it is, the two shapes are colliding.

    sprites for the circle are generated by creating an image the size of the circle's bounding box, and calculating a distance value
    between every pixel and the image's center. This distance value is then used to determing color/shade the pixel will be colored with.

Still working on finalising movement mechanics:
    - want to determine whether movement will be like the game 'celeste' with dash cancels and wave-dashes, or a more simple system
      like hollow knight
    - want to still preserve momentum aspect of the game, as that is very fun, but don't want it to be celeste knock-off...

